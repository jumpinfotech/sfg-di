# Profiles allow you to have beans in your configuration that take on different characteristics, 
# allowing you to control your Spring application in different runtime environments. 
# The inversion of control that the Spring container gives us is now going to wire up the application differently depending on the active profiles. 

# profile EN will inject I18nEnglishGreetingService which has @Profile("EN")
# ES is the other option, so setting a profile resolves any ConflictingBeanDefinitionException
# If spring.profiles.active is not given, then default profile becomes active e.g. @Profile({"ES", "default"}),
# without spring.profiles.active and without a "default" e.g. @Profile("ES"), we'll get an error.
# We can have many profiles set separated by a comma, careful it's case sensitive!
spring.profiles.active=cat,EN
